<?php

namespace App\Controller;

use App\Entity\Commentaire;
use App\Entity\Publication;
use App\Form\CommentaireType;
use App\Form\PublicationType;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class CommentaireController extends AbstractController
{
    /**
     * @Route("/commentaire", name="commentaire")
     */
    public function index(): Response
    {
        return $this->render('commentaire/index.html.twig', [
            'controller_name' => 'CommentaireController',
        ]);
    }

    /**
     * @Route("/afficheC", name="afficheC")
     */
    public function afficheC(): Response
    {
        //rÃƒÂ©cupÃƒÂ©rer le repository pour utiliser la fonction findAll
        $r=$this->getDoctrine()->getRepository(Commentaire::class);
        //faire appel Ãƒ  la fonction findAll()
        $commentaires=$r->findAll();

        //ou $r=$this->getDoctrine()->getRepository(Classroom::class)->findAll();
        return $this->render('commentaire/afficheC.html.twig', [
            'c' => $commentaires,
        ]);
    }
    /**
     * @Route("/affichefronC", name="affichefronC")
     */
    public function affichefronC(): Response
    {
        //rÃƒÂ©cupÃƒÂ©rer le repository pour utiliser la fonction findAll
        $r=$this->getDoctrine()->getRepository(Commentaire::class);
        //faire appel Ãƒ  la fonction findAll()
        $publications=$r->findAll();

        //ou $r=$this->getDoctrine()->getRepository(Classroom::class)->findAll();
        return $this->render('commentaire/affichefronC.html.twig', [
            'c' => $publications,
        ]);
    }

    /**
     * @Route("/supp/{id}", name="suppC")
     */
    public function supp($id): Response

    {
        //rÃ©cupÃ©rer le classroom Ã  supprimer
        $commentaires=$this->getDoctrine()->getRepository(Commentaire::class)->find($id);
        //on passe Ã  la suppression
        $em=$this->getDoctrine()->getManager();
        $em->remove($commentaires);
        $em->flush();

        return $this->redirectToRoute('afficheC');
    }
    /**
     * @Route("/suppCC/{id}", name="suppCC")
     */
    public function suppCC($id): Response

    {
        //rÃ©cupÃ©rer le classroom Ã  supprimer
        $commentaires=$this->getDoctrine()->getRepository(Commentaire::class)->find($id);
        //on passe Ã  la suppression
        $em=$this->getDoctrine()->getManager();
        $em->remove($commentaires);
        $em->flush();

        return $this->redirectToRoute('affichefronC');
    }
    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * @Route("/ajoutC", name="ajoutC")
     */
    public function ajoutC(Request $request): Response
    {
        //crÃƒÂ©ation du formulaire
        $c = new Commentaire();
        $form = $this->createForm(CommentaireType::class, $c);
        //rÃƒÂ©cupÃƒÂ©rer les donnÃƒÂ©es saisies depuis la requete http
        $form->handleRequest($request);
        if ($form->isSubmitted()&& $form->isValid()) {
            $file = $form->get('image')->getData();

            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            // moves the file to the directory where brochures are stored
            $file->move(
                $this->getParameter('brochures_directory'),
                $fileName
            );

            $c->setImage($fileName);
            $em = $this->getDoctrine()->getManager();
            $em->persist($c);
            $em->flush();
            return $this->redirectToRoute('affichefronC');
        }

        return $this->render('commentaire/ajoutC.html.twig', [
            'f' => $form->createView(),
        ]);

    }

    /**
     * @Route("/ajoutfronC", name="ajoutfronC")
     */
    public function ajoutfronC(Request $request): Response
    {
        //crÃƒÂ©ation du formulaire
        $c = new Commentaire();
        $form = $this->createForm(CommentaireType::class, $c);
        //rÃƒÂ©cupÃƒÂ©rer les donnÃƒÂ©es saisies depuis la requete http
        $form->handleRequest($request);
        if ($form->isSubmitted()&& $form->isValid()) {
            $file = $form->get('image')->getData();

            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            // moves the file to the directory where brochures are stored
            $file->move(
                $this->getParameter('brochures_directory'),
                $fileName
            );

            $c->setImage($fileName);
            $em = $this->getDoctrine()->getManager();
            $em->persist($c);
            $em->flush();
            return $this->redirectToRoute('affichefronC');
        }

        return $this->render('commentaire/ajoutfronC.html.twig', [
            'f' => $form->createView(),
        ]);

    }


    /**
     * @Route("/modifC/{id}", name="modifC")
     */
    public function modifE(Request $request,$id): Response
    {
        //rÃƒÂ©cupÃƒÂ©rer le classroom ÃƒÂ  modifier
        $commentaires=$this->getDoctrine()->getRepository(Commentaire::class)->find($id);
        //crÃƒÂ©ation du formulaire rempli
        $form=$this->createForm(CommentaireType::class,$commentaires);
        //rÃƒÂ©cupÃƒÂ©rer les donnÃƒÂ©es saisies depuis la requete http
        $form->handleRequest($request);
        if($form->isSubmitted())
        {
            $file = $form->get('image')->getData();

            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            // moves the file to the directory where brochures are stored
            $file->move(
                $this->getParameter('brochures_directory'),
                $fileName
            );

            $commentaires->setImage($fileName);

            $em=$this->getDoctrine()->getManager();

            $em->flush();
            return $this->redirectToRoute('afficheC');
        }

        return $this->render('commentaire/ajoutC.html.twig', [
            'f' => $form->createView(),
        ]);
    }
    /**
     * @Route("/modifCC/{id}", name="modifCC")
     */
    public function modifCC(Request $request,$id): Response
    {
        //rÃƒÂ©cupÃƒÂ©rer le classroom ÃƒÂ  modifier
        $commentaires=$this->getDoctrine()->getRepository(Commentaire::class)->find($id);
        //crÃƒÂ©ation du formulaire rempli
        $form=$this->createForm(CommentaireType::class,$commentaires);
        //rÃƒÂ©cupÃƒÂ©rer les donnÃƒÂ©es saisies depuis la requete http
        $form->handleRequest($request);
        if($form->isSubmitted())
        {
            $file = $form->get('image')->getData();

            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            // moves the file to the directory where brochures are stored
            $file->move(
                $this->getParameter('brochures_directory'),
                $fileName
            );

            $commentaires->setImage($fileName);

            $em=$this->getDoctrine()->getManager();

            $em->flush();
            return $this->redirectToRoute('affichefronC');
        }

        return $this->render('commentaire/ajoutC.html.twig', [
            'f' => $form->createView(),
        ]);
    }









}
