<?php

namespace App\Controller;


use App\Entity\Reclamation;
use App\Form\PublicationType;
use App\Form\ReclamationType;
use phpDocumentor\Reflection\PseudoTypes\TraitString;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use MercurySeries\FlashyBundle\FlashyNotifier;
use Symfony\Component\Validator\Validator\ValidatorInterface;
use Symfony\Contracts\Translation\TranslatorInterface;



class ReclamationController extends AbstractController
{
    /**
     * @Route("/reclamation", name="reclamation")
     */
    public function index(): Response
    {
        return $this->render('reclamation/index.html.twig', [
            'controller_name' => 'ReclamationController',
        ]);
    }
    /**
     * @Route("/afficheR", name="afficheR")
     */
    public function afficheR(): Response
    {
        //rÃƒÂ©cupÃƒÂ©rer le repository pour utiliser la fonction findAll
        $r=$this->getDoctrine()->getRepository(Reclamation::class);
        //faire appel Ãƒ  la fonction findAll()
        $reclamation=$r->findAll();

        //ou $r=$this->getDoctrine()->getRepository(Classroom::class)->findAll();
        return $this->render('reclamation/afficheR.html.twig', [
            'r' => $reclamation,
        ]);
    }



    /**
     * @Route("/suppR/{id}", name="suppRR")
     */
    public function supp($id): Response

    {
        //rÃ©cupÃ©rer le classroom Ã  supprimer
        $reclamation=$this->getDoctrine()->getRepository(Reclamation::class)->find($id);
        //on passe Ã  la suppression
        $em=$this->getDoctrine()->getManager();
        $em->remove($reclamation);
        $em->flush();

        return $this->redirectToRoute('afficheR');
    }
    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
    /**
     * @Route("/ajoutR", name="ajoutR")
     */
    public function ajoutR(Request $request,FlashyNotifier $flashy,ValidatorInterface $validator,TranslatorInterface $translator): Response
    {
        //crÃƒÂ©ation du formulaire
        $r = new Reclamation();
        $form = $this->createForm(ReclamationType::class, $r);
        //rÃƒÂ©cupÃƒÂ©rer les donnÃƒÂ©es saisies depuis la requete http
        $form->handleRequest($request);
        if ($form->isSubmitted()&& $form->isValid()) {
            $file = $form->get('image')->getData();

            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            // moves the file to the directory where brochures are stored
            $file->move(
                $this->getParameter('brochures_directory'),
                $fileName
            );

            $r->setImage($fileName);
            $em = $this->getDoctrine()->getManager();
            $em->persist($r);
            $em->flush();
            $message= $translator->trans('Nouveau Recalamation !');
            $flashy->success($message, 'http://your-awesome-link.com');

            return $this->redirectToRoute('afficheR');
        }

        return $this->render('reclamation/ajoutR.html.twig', [
            'f' => $form->createView(),
        ]);

    }



    /**
     * @Route("/modifR/{id}", name="modifR")
     */
    public function modifR(Request $request,$id): Response
    {
        //rÃƒÂ©cupÃƒÂ©rer le classroom ÃƒÂ  modifier
        $reclamations=$this->getDoctrine()->getRepository(Reclamation::class)->find($id);
        //crÃƒÂ©ation du formulaire rempli
        $form=$this->createForm(PublicationType::class,$reclamations);
        //rÃƒÂ©cupÃƒÂ©rer les donnÃƒÂ©es saisies depuis la requete http
        $form->handleRequest($request);
        if($form->isSubmitted())
        {
            $file = $form->get('image')->getData();

            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            // moves the file to the directory where brochures are stored
            $file->move(
                $this->getParameter('brochures_directory'),
                $fileName
            );

            $reclamations->setImage($fileName);
            $em=$this->getDoctrine()->getManager();

            $em->flush();
            return $this->redirectToRoute('afficheR');
        }

        return $this->render('reclamation/ajoutR.html.twig', [
            'f' => $form->createView(),
        ]);
    }
}
